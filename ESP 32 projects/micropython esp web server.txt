import network
import esp
import gc
from machine import Pin, ADC
from time import sleep
import uasyncio as asyncio
from esp32_gpio import ESP32GPIOWebServer

# WiFi credentials
SSID = "Your_SSID"
PASSWORD = "Your_PASSWORD"

# Initialize WiFi
wifi = network.WLAN(network.STA_IF)
wifi.active(True)
wifi.connect(SSID, PASSWORD)

while not wifi.isconnected():
    sleep(1)
print("Connected to WiFi:", wifi.ifconfig())

# Define pins for buttons, potentiometers, and sensors
button_pins = [5, 18, 19, 21, 22, 23, 25, 26, 27, 32, 33, 34, 35, 36, 39, 4, 2, 14, 12, 13]
potentiometer_pins = [15, 16, 17, 36, 39]
sensor_pins = [3, 1, 0, 8, 7]

# Initialize buttons, potentiometers, and sensors
buttons = [Pin(pin, Pin.IN, Pin.PULL_UP) for pin in button_pins]
potentiometers = [ADC(Pin(pin)) for pin in potentiometer_pins]
sensors = [ADC(Pin(pin)) for pin in sensor_pins]

# Configure ADC resolution
for pot in potentiometers:
    pot.atten(ADC.ATTN_11DB)

for sensor in sensors:
    sensor.atten(ADC.ATTN_11DB)

# Web server instance
server = ESP32GPIOWebServer()

# Function to get button states
async def get_button_states():
    return {f"btn{i}": buttons[i].value() for i in range(20)}

# Function to get potentiometer values
async def get_pot_values():
    return {f"pot{i}": potentiometers[i].read() for i in range(5)}

# Function to get sensor readings
async def get_sensor_readings():
    return {f"sensor{i}": sensors[i].read() for i in range(5)}

# Define routes
@server.route("/")
async def index(request):
    return server.render_template("index.html")

@server.route("/data")
async def data(request):
    response = {
        "buttons": await get_button_states(),
        "potentiometers": await get_pot_values(),
        "sensors": await get_sensor_readings()
    }
    return server.json(response)

# Start server
server.run()
